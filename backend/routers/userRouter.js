import express from "express";
import expressAsyncHandler from "express-async-handler";
import bcrypt from "bcryptjs";
import data from "../data.js";
import User from "../models/userModel.js";
import { generateToken } from "../utils.js";

const userRouter = express.Router();

userRouter.get("/seed", 
expressAsyncHandler( // package that allows us to show error when there is.
    async(req,res) =>{ // Because nature of mongoose operations is async we gotta define this func as async
        // await User.remove({}); // before creating new user removes all the users!!!!
        const createdUsers = await User.insertMany(data.users); // Insert object and array in the user collection. Users inside data.ts will be inserted to the users collection in mongodb
        res.send({createdUsers});
}));

userRouter.post("/signin", expressAsyncHandler(async (req, res) => { // Creating a new request thats why we use post instead of get
    const user = await User.findOne({email: req.body.email}) // Compare email in the db with the email inside of body of this request
    if(user){
        if(bcrypt.compareSync(req.body.password, user.password)){
            res.send({
                _id: user._id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                token: generateToken(user) //this token will be generated by  Json webtoken which  generates hash string that you need to use that for your next request to authenticate your request
            });
            return;
        }
    }
    res.status(401).send({message: "Geçersiz kullanıcı adı veya şifre"});
}));

userRouter.post("/register", 
    expressAsyncHandler(async(req,res)=>{
        const user = new User({
            name: req.body.name, 
            email: req.body.email,
            password: bcrypt.hashSync(req.body.password, 8),
        });
        const createdUser = await user.save();// create a new user and set the new user to createdUser
        res.send({
            _id: createdUser._id,
            name: createdUser.name,
            email: createdUser.email,
            isAdmin: createdUser.isAdmin,
            token: generateToken(createdUser) //this token will be generated by  Json webtoken which  generates hash string that you need to use that for your next request to authenticate your request
        }); 
    })
);

export default userRouter;